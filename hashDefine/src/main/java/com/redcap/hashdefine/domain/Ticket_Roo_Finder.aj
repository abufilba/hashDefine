// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.redcap.hashdefine.domain;

import com.redcap.hashdefine.domain.Ticket;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Ticket_Roo_Finder {
    
    public static TypedQuery<Ticket> Ticket.findTicketsByDescriptionLike(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Ticket.entityManager();
        TypedQuery<Ticket> q = em.createQuery("SELECT o FROM Ticket AS o WHERE LOWER(o.description) LIKE LOWER(:description)", Ticket.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Ticket> Ticket.findTicketsByReferenceLike(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        reference = reference.replace('*', '%');
        if (reference.charAt(0) != '%') {
            reference = "%" + reference;
        }
        if (reference.charAt(reference.length() - 1) != '%') {
            reference = reference + "%";
        }
        EntityManager em = Ticket.entityManager();
        TypedQuery<Ticket> q = em.createQuery("SELECT o FROM Ticket AS o WHERE LOWER(o.reference) LIKE LOWER(:reference)", Ticket.class);
        q.setParameter("reference", reference);
        return q;
    }
    
    public static TypedQuery<Ticket> Ticket.findTicketsBySummaryLike(String summary) {
        if (summary == null || summary.length() == 0) throw new IllegalArgumentException("The summary argument is required");
        summary = summary.replace('*', '%');
        if (summary.charAt(0) != '%') {
            summary = "%" + summary;
        }
        if (summary.charAt(summary.length() - 1) != '%') {
            summary = summary + "%";
        }
        EntityManager em = Ticket.entityManager();
        TypedQuery<Ticket> q = em.createQuery("SELECT o FROM Ticket AS o WHERE LOWER(o.summary) LIKE LOWER(:summary)", Ticket.class);
        q.setParameter("summary", summary);
        return q;
    }
    
}
